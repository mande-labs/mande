// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vote/vote_log.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VoteLog struct {
	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Voter     string `protobuf:"bytes,2,opt,name=voter,proto3" json:"voter,omitempty"`
	Receiver  string `protobuf:"bytes,3,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Count     uint64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Operation uint64 `protobuf:"varint,5,opt,name=operation,proto3" json:"operation,omitempty"`
	Mode      uint64 `protobuf:"varint,6,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (m *VoteLog) Reset()         { *m = VoteLog{} }
func (m *VoteLog) String() string { return proto.CompactTextString(m) }
func (*VoteLog) ProtoMessage()    {}
func (*VoteLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_f854187e723e351f, []int{0}
}
func (m *VoteLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteLog.Merge(m, src)
}
func (m *VoteLog) XXX_Size() int {
	return m.Size()
}
func (m *VoteLog) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteLog.DiscardUnknown(m)
}

var xxx_messageInfo_VoteLog proto.InternalMessageInfo

func (m *VoteLog) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *VoteLog) GetVoter() string {
	if m != nil {
		return m.Voter
	}
	return ""
}

func (m *VoteLog) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *VoteLog) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *VoteLog) GetOperation() uint64 {
	if m != nil {
		return m.Operation
	}
	return 0
}

func (m *VoteLog) GetMode() uint64 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func init() {
	proto.RegisterType((*VoteLog)(nil), "mandelabs.mande.vote.VoteLog")
}

func init() { proto.RegisterFile("vote/vote_log.proto", fileDescriptor_f854187e723e351f) }

var fileDescriptor_f854187e723e351f = []byte{
	// 229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0xcb, 0x2f, 0x49,
	0xd5, 0x07, 0x11, 0xf1, 0x39, 0xf9, 0xe9, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x22, 0xb9,
	0x89, 0x79, 0x29, 0xa9, 0x39, 0x89, 0x49, 0xc5, 0x7a, 0x60, 0x96, 0x1e, 0x48, 0x5e, 0x69, 0x32,
	0x23, 0x17, 0x7b, 0x58, 0x7e, 0x49, 0xaa, 0x4f, 0x7e, 0xba, 0x10, 0x1f, 0x17, 0x53, 0x66, 0x8a,
	0x04, 0xa3, 0x02, 0xa3, 0x06, 0x4b, 0x10, 0x53, 0x66, 0x8a, 0x90, 0x08, 0x17, 0x2b, 0x48, 0x4d,
	0x91, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x84, 0x23, 0x24, 0xc5, 0xc5, 0x51, 0x94, 0x9a,
	0x9c, 0x9a, 0x59, 0x96, 0x5a, 0x24, 0xc1, 0x0c, 0x96, 0x80, 0xf3, 0x41, 0x3a, 0x92, 0xf3, 0x4b,
	0xf3, 0x4a, 0x24, 0x58, 0xc0, 0x86, 0x40, 0x38, 0x42, 0x32, 0x5c, 0x9c, 0xf9, 0x05, 0xa9, 0x45,
	0x89, 0x25, 0x99, 0xf9, 0x79, 0x12, 0xac, 0x60, 0x19, 0x84, 0x80, 0x90, 0x10, 0x17, 0x4b, 0x6e,
	0x7e, 0x4a, 0xaa, 0x04, 0x1b, 0x58, 0x02, 0xcc, 0x76, 0x72, 0x3a, 0xf1, 0x48, 0x8e, 0xf1, 0xc2,
	0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1,
	0xc6, 0x63, 0x39, 0x86, 0x28, 0x8d, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c,
	0x7d, 0xb0, 0x37, 0x74, 0x41, 0x3e, 0x82, 0x30, 0xf5, 0x2b, 0xc0, 0x7e, 0xd6, 0x2f, 0xa9, 0x2c,
	0x48, 0x2d, 0x4e, 0x62, 0x03, 0x7b, 0xdb, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x25, 0x28, 0x2c,
	0x01, 0x0d, 0x01, 0x00, 0x00,
}

func (m *VoteLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mode != 0 {
		i = encodeVarintVoteLog(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x30
	}
	if m.Operation != 0 {
		i = encodeVarintVoteLog(dAtA, i, uint64(m.Operation))
		i--
		dAtA[i] = 0x28
	}
	if m.Count != 0 {
		i = encodeVarintVoteLog(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintVoteLog(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintVoteLog(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintVoteLog(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintVoteLog(dAtA []byte, offset int, v uint64) int {
	offset -= sovVoteLog(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VoteLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovVoteLog(uint64(m.Id))
	}
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovVoteLog(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovVoteLog(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovVoteLog(uint64(m.Count))
	}
	if m.Operation != 0 {
		n += 1 + sovVoteLog(uint64(m.Operation))
	}
	if m.Mode != 0 {
		n += 1 + sovVoteLog(uint64(m.Mode))
	}
	return n
}

func sovVoteLog(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVoteLog(x uint64) (n int) {
	return sovVoteLog(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VoteLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoteLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoteLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoteLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoteLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoteLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			m.Operation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operation |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVoteLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVoteLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVoteLog(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVoteLog
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVoteLog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVoteLog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVoteLog
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVoteLog
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVoteLog
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVoteLog        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVoteLog          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVoteLog = fmt.Errorf("proto: unexpected end of group")
)
