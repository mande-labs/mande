// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vote/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16cb154aa937961, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16cb154aa937961, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetVoteLogRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetVoteLogRequest) Reset()         { *m = QueryGetVoteLogRequest{} }
func (m *QueryGetVoteLogRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetVoteLogRequest) ProtoMessage()    {}
func (*QueryGetVoteLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16cb154aa937961, []int{2}
}
func (m *QueryGetVoteLogRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVoteLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVoteLogRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVoteLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVoteLogRequest.Merge(m, src)
}
func (m *QueryGetVoteLogRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVoteLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVoteLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVoteLogRequest proto.InternalMessageInfo

func (m *QueryGetVoteLogRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetVoteLogResponse struct {
	VoteLog VoteLog `protobuf:"bytes,1,opt,name=VoteLog,proto3" json:"VoteLog"`
}

func (m *QueryGetVoteLogResponse) Reset()         { *m = QueryGetVoteLogResponse{} }
func (m *QueryGetVoteLogResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetVoteLogResponse) ProtoMessage()    {}
func (*QueryGetVoteLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16cb154aa937961, []int{3}
}
func (m *QueryGetVoteLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVoteLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVoteLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVoteLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVoteLogResponse.Merge(m, src)
}
func (m *QueryGetVoteLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVoteLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVoteLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVoteLogResponse proto.InternalMessageInfo

func (m *QueryGetVoteLogResponse) GetVoteLog() VoteLog {
	if m != nil {
		return m.VoteLog
	}
	return VoteLog{}
}

type QueryAllVoteLogRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVoteLogRequest) Reset()         { *m = QueryAllVoteLogRequest{} }
func (m *QueryAllVoteLogRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllVoteLogRequest) ProtoMessage()    {}
func (*QueryAllVoteLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16cb154aa937961, []int{4}
}
func (m *QueryAllVoteLogRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVoteLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVoteLogRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVoteLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVoteLogRequest.Merge(m, src)
}
func (m *QueryAllVoteLogRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVoteLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVoteLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVoteLogRequest proto.InternalMessageInfo

func (m *QueryAllVoteLogRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllVoteLogResponse struct {
	VoteLog    []VoteLog           `protobuf:"bytes,1,rep,name=VoteLog,proto3" json:"VoteLog"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVoteLogResponse) Reset()         { *m = QueryAllVoteLogResponse{} }
func (m *QueryAllVoteLogResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllVoteLogResponse) ProtoMessage()    {}
func (*QueryAllVoteLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16cb154aa937961, []int{5}
}
func (m *QueryAllVoteLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVoteLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVoteLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVoteLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVoteLogResponse.Merge(m, src)
}
func (m *QueryAllVoteLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVoteLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVoteLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVoteLogResponse proto.InternalMessageInfo

func (m *QueryAllVoteLogResponse) GetVoteLog() []VoteLog {
	if m != nil {
		return m.VoteLog
	}
	return nil
}

func (m *QueryAllVoteLogResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetVoteCastedRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetVoteCastedRequest) Reset()         { *m = QueryGetVoteCastedRequest{} }
func (m *QueryGetVoteCastedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetVoteCastedRequest) ProtoMessage()    {}
func (*QueryGetVoteCastedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16cb154aa937961, []int{6}
}
func (m *QueryGetVoteCastedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVoteCastedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVoteCastedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVoteCastedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVoteCastedRequest.Merge(m, src)
}
func (m *QueryGetVoteCastedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVoteCastedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVoteCastedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVoteCastedRequest proto.InternalMessageInfo

func (m *QueryGetVoteCastedRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetVoteCastedResponse struct {
	VoteCasted VoteCasted `protobuf:"bytes,1,opt,name=voteCasted,proto3" json:"voteCasted"`
}

func (m *QueryGetVoteCastedResponse) Reset()         { *m = QueryGetVoteCastedResponse{} }
func (m *QueryGetVoteCastedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetVoteCastedResponse) ProtoMessage()    {}
func (*QueryGetVoteCastedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16cb154aa937961, []int{7}
}
func (m *QueryGetVoteCastedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVoteCastedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVoteCastedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVoteCastedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVoteCastedResponse.Merge(m, src)
}
func (m *QueryGetVoteCastedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVoteCastedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVoteCastedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVoteCastedResponse proto.InternalMessageInfo

func (m *QueryGetVoteCastedResponse) GetVoteCasted() VoteCasted {
	if m != nil {
		return m.VoteCasted
	}
	return VoteCasted{}
}

type QueryAllVoteCastedRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVoteCastedRequest) Reset()         { *m = QueryAllVoteCastedRequest{} }
func (m *QueryAllVoteCastedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllVoteCastedRequest) ProtoMessage()    {}
func (*QueryAllVoteCastedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16cb154aa937961, []int{8}
}
func (m *QueryAllVoteCastedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVoteCastedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVoteCastedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVoteCastedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVoteCastedRequest.Merge(m, src)
}
func (m *QueryAllVoteCastedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVoteCastedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVoteCastedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVoteCastedRequest proto.InternalMessageInfo

func (m *QueryAllVoteCastedRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllVoteCastedResponse struct {
	VoteCasted []VoteCasted        `protobuf:"bytes,1,rep,name=voteCasted,proto3" json:"voteCasted"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVoteCastedResponse) Reset()         { *m = QueryAllVoteCastedResponse{} }
func (m *QueryAllVoteCastedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllVoteCastedResponse) ProtoMessage()    {}
func (*QueryAllVoteCastedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16cb154aa937961, []int{9}
}
func (m *QueryAllVoteCastedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVoteCastedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVoteCastedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVoteCastedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVoteCastedResponse.Merge(m, src)
}
func (m *QueryAllVoteCastedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVoteCastedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVoteCastedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVoteCastedResponse proto.InternalMessageInfo

func (m *QueryAllVoteCastedResponse) GetVoteCasted() []VoteCasted {
	if m != nil {
		return m.VoteCasted
	}
	return nil
}

func (m *QueryAllVoteCastedResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetBallotRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetBallotRequest) Reset()         { *m = QueryGetBallotRequest{} }
func (m *QueryGetBallotRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBallotRequest) ProtoMessage()    {}
func (*QueryGetBallotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16cb154aa937961, []int{10}
}
func (m *QueryGetBallotRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBallotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBallotRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBallotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBallotRequest.Merge(m, src)
}
func (m *QueryGetBallotRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBallotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBallotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBallotRequest proto.InternalMessageInfo

func (m *QueryGetBallotRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetBallotResponse struct {
	Ballot Ballot `protobuf:"bytes,1,opt,name=ballot,proto3" json:"ballot"`
}

func (m *QueryGetBallotResponse) Reset()         { *m = QueryGetBallotResponse{} }
func (m *QueryGetBallotResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBallotResponse) ProtoMessage()    {}
func (*QueryGetBallotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16cb154aa937961, []int{11}
}
func (m *QueryGetBallotResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBallotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBallotResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBallotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBallotResponse.Merge(m, src)
}
func (m *QueryGetBallotResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBallotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBallotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBallotResponse proto.InternalMessageInfo

func (m *QueryGetBallotResponse) GetBallot() Ballot {
	if m != nil {
		return m.Ballot
	}
	return Ballot{}
}

type QueryAllBallotRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBallotRequest) Reset()         { *m = QueryAllBallotRequest{} }
func (m *QueryAllBallotRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBallotRequest) ProtoMessage()    {}
func (*QueryAllBallotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16cb154aa937961, []int{12}
}
func (m *QueryAllBallotRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBallotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBallotRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBallotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBallotRequest.Merge(m, src)
}
func (m *QueryAllBallotRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBallotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBallotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBallotRequest proto.InternalMessageInfo

func (m *QueryAllBallotRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllBallotResponse struct {
	Ballot     []Ballot            `protobuf:"bytes,1,rep,name=ballot,proto3" json:"ballot"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBallotResponse) Reset()         { *m = QueryAllBallotResponse{} }
func (m *QueryAllBallotResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBallotResponse) ProtoMessage()    {}
func (*QueryAllBallotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16cb154aa937961, []int{13}
}
func (m *QueryAllBallotResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBallotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBallotResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBallotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBallotResponse.Merge(m, src)
}
func (m *QueryAllBallotResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBallotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBallotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBallotResponse proto.InternalMessageInfo

func (m *QueryAllBallotResponse) GetBallot() []Ballot {
	if m != nil {
		return m.Ballot
	}
	return nil
}

func (m *QueryAllBallotResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetBookRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetBookRequest) Reset()         { *m = QueryGetBookRequest{} }
func (m *QueryGetBookRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBookRequest) ProtoMessage()    {}
func (*QueryGetBookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16cb154aa937961, []int{14}
}
func (m *QueryGetBookRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBookRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBookRequest.Merge(m, src)
}
func (m *QueryGetBookRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBookRequest proto.InternalMessageInfo

func (m *QueryGetBookRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetBookResponse struct {
	Book Book `protobuf:"bytes,1,opt,name=book,proto3" json:"book"`
}

func (m *QueryGetBookResponse) Reset()         { *m = QueryGetBookResponse{} }
func (m *QueryGetBookResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBookResponse) ProtoMessage()    {}
func (*QueryGetBookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16cb154aa937961, []int{15}
}
func (m *QueryGetBookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBookResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBookResponse.Merge(m, src)
}
func (m *QueryGetBookResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBookResponse proto.InternalMessageInfo

func (m *QueryGetBookResponse) GetBook() Book {
	if m != nil {
		return m.Book
	}
	return Book{}
}

type QueryAllBookRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBookRequest) Reset()         { *m = QueryAllBookRequest{} }
func (m *QueryAllBookRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBookRequest) ProtoMessage()    {}
func (*QueryAllBookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16cb154aa937961, []int{16}
}
func (m *QueryAllBookRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBookRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBookRequest.Merge(m, src)
}
func (m *QueryAllBookRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBookRequest proto.InternalMessageInfo

func (m *QueryAllBookRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllBookResponse struct {
	Book       []Book              `protobuf:"bytes,1,rep,name=book,proto3" json:"book"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBookResponse) Reset()         { *m = QueryAllBookResponse{} }
func (m *QueryAllBookResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBookResponse) ProtoMessage()    {}
func (*QueryAllBookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16cb154aa937961, []int{17}
}
func (m *QueryAllBookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBookResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBookResponse.Merge(m, src)
}
func (m *QueryAllBookResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBookResponse proto.InternalMessageInfo

func (m *QueryAllBookResponse) GetBook() []Book {
	if m != nil {
		return m.Book
	}
	return nil
}

func (m *QueryAllBookResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "mandelabs.mande.vote.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "mandelabs.mande.vote.QueryParamsResponse")
	proto.RegisterType((*QueryGetVoteLogRequest)(nil), "mandelabs.mande.vote.QueryGetVoteLogRequest")
	proto.RegisterType((*QueryGetVoteLogResponse)(nil), "mandelabs.mande.vote.QueryGetVoteLogResponse")
	proto.RegisterType((*QueryAllVoteLogRequest)(nil), "mandelabs.mande.vote.QueryAllVoteLogRequest")
	proto.RegisterType((*QueryAllVoteLogResponse)(nil), "mandelabs.mande.vote.QueryAllVoteLogResponse")
	proto.RegisterType((*QueryGetVoteCastedRequest)(nil), "mandelabs.mande.vote.QueryGetVoteCastedRequest")
	proto.RegisterType((*QueryGetVoteCastedResponse)(nil), "mandelabs.mande.vote.QueryGetVoteCastedResponse")
	proto.RegisterType((*QueryAllVoteCastedRequest)(nil), "mandelabs.mande.vote.QueryAllVoteCastedRequest")
	proto.RegisterType((*QueryAllVoteCastedResponse)(nil), "mandelabs.mande.vote.QueryAllVoteCastedResponse")
	proto.RegisterType((*QueryGetBallotRequest)(nil), "mandelabs.mande.vote.QueryGetBallotRequest")
	proto.RegisterType((*QueryGetBallotResponse)(nil), "mandelabs.mande.vote.QueryGetBallotResponse")
	proto.RegisterType((*QueryAllBallotRequest)(nil), "mandelabs.mande.vote.QueryAllBallotRequest")
	proto.RegisterType((*QueryAllBallotResponse)(nil), "mandelabs.mande.vote.QueryAllBallotResponse")
	proto.RegisterType((*QueryGetBookRequest)(nil), "mandelabs.mande.vote.QueryGetBookRequest")
	proto.RegisterType((*QueryGetBookResponse)(nil), "mandelabs.mande.vote.QueryGetBookResponse")
	proto.RegisterType((*QueryAllBookRequest)(nil), "mandelabs.mande.vote.QueryAllBookRequest")
	proto.RegisterType((*QueryAllBookResponse)(nil), "mandelabs.mande.vote.QueryAllBookResponse")
}

func init() { proto.RegisterFile("vote/query.proto", fileDescriptor_d16cb154aa937961) }

var fileDescriptor_d16cb154aa937961 = []byte{
	// 870 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x97, 0x4b, 0x6f, 0xd3, 0x4a,
	0x14, 0xc7, 0x33, 0x49, 0x9a, 0xaa, 0x73, 0x75, 0x5f, 0xd3, 0xdc, 0x5e, 0x30, 0x6d, 0x5a, 0xa6,
	0xaf, 0x34, 0x0f, 0x9b, 0x16, 0x56, 0x48, 0x2c, 0x1a, 0xa4, 0x76, 0xd3, 0x45, 0x1b, 0x21, 0x84,
	0x90, 0x50, 0x71, 0x12, 0xcb, 0x58, 0x71, 0x32, 0x69, 0xed, 0x56, 0xad, 0xaa, 0x6e, 0x10, 0x6c,
	0x90, 0x90, 0x10, 0x8f, 0x25, 0x48, 0x88, 0x35, 0x9f, 0x80, 0x2f, 0xd0, 0x65, 0x25, 0x36, 0xac,
	0x10, 0x6a, 0xf9, 0x20, 0x68, 0x66, 0x4e, 0x1e, 0xae, 0x13, 0xdb, 0x45, 0xd9, 0x54, 0xee, 0xc9,
	0x79, 0xfc, 0xce, 0xff, 0x78, 0xce, 0x24, 0xf8, 0x9f, 0x7d, 0xe6, 0x1a, 0xda, 0xce, 0x9e, 0xb1,
	0x7b, 0xa8, 0xb6, 0x76, 0x99, 0xcb, 0x48, 0xba, 0xa1, 0x37, 0x6b, 0x86, 0xad, 0x57, 0x1c, 0x55,
	0x3c, 0xa9, 0xdc, 0x43, 0x49, 0x9b, 0xcc, 0x64, 0xc2, 0x41, 0xe3, 0x4f, 0xd2, 0x57, 0x99, 0x34,
	0x19, 0x33, 0x6d, 0x43, 0xd3, 0x5b, 0x96, 0xa6, 0x37, 0x9b, 0xcc, 0xd5, 0x5d, 0x8b, 0x35, 0x1d,
	0xf8, 0x34, 0x57, 0x65, 0x4e, 0x83, 0x39, 0x5a, 0x45, 0x77, 0xa0, 0x84, 0xb6, 0xbf, 0x5c, 0x31,
	0x5c, 0x7d, 0x59, 0x6b, 0xe9, 0xa6, 0xd5, 0x14, 0xce, 0xe0, 0xfb, 0xaf, 0xe0, 0x68, 0xe9, 0xbb,
	0x7a, 0xa3, 0x1d, 0x3e, 0x2e, 0x4c, 0xfc, 0xcf, 0xb6, 0xcd, 0x4c, 0x30, 0x4e, 0x74, 0x8d, 0x55,
	0xdd, 0x71, 0x8d, 0x9a, 0x27, 0xbe, 0xa2, 0xdb, 0x36, 0x73, 0xc1, 0xf4, 0xb7, 0x34, 0x31, 0x56,
	0x97, 0x06, 0x9a, 0xc6, 0x64, 0x8b, 0x53, 0x6c, 0x8a, 0x2a, 0x65, 0x63, 0x67, 0xcf, 0x70, 0x5c,
	0xba, 0x85, 0xc7, 0x3d, 0x56, 0xa7, 0xc5, 0x9a, 0x8e, 0x41, 0x6e, 0xe3, 0x94, 0xa4, 0xb9, 0x82,
	0x66, 0x50, 0xf6, 0x8f, 0x95, 0x49, 0xb5, 0x9f, 0x2e, 0xaa, 0x8c, 0x2a, 0x25, 0x4f, 0xbe, 0x4f,
	0xc7, 0xca, 0x10, 0x41, 0xb3, 0x78, 0x42, 0xa4, 0x5c, 0x37, 0xdc, 0xfb, 0xcc, 0x35, 0x36, 0x98,
	0x09, 0xc5, 0xc8, 0x5f, 0x38, 0x6e, 0xd5, 0x44, 0xc6, 0x64, 0x39, 0x6e, 0xd5, 0xe8, 0x03, 0xfc,
	0xbf, 0xcf, 0x13, 0x00, 0xee, 0xe0, 0x51, 0x30, 0x01, 0xc1, 0x54, 0x7f, 0x02, 0x70, 0x02, 0x84,
	0x76, 0x0c, 0x7d, 0x0c, 0x0c, 0xab, 0xb6, 0x7d, 0x81, 0x61, 0x0d, 0xe3, 0xae, 0xfc, 0x90, 0x7b,
	0x41, 0x95, 0xb3, 0x52, 0xf9, 0xac, 0x54, 0xf9, 0x3a, 0xc0, 0xac, 0xd4, 0x4d, 0xdd, 0x34, 0x20,
	0xb6, 0xdc, 0x13, 0x49, 0x3f, 0x22, 0x80, 0xef, 0x2d, 0xd1, 0x0f, 0x3e, 0x71, 0x59, 0x78, 0xb2,
	0xee, 0x41, 0x8c, 0x0b, 0xc4, 0xc5, 0x50, 0x44, 0x59, 0xdb, 0xc3, 0xb8, 0x8c, 0xaf, 0xf6, 0xea,
	0x7b, 0x57, 0xbc, 0x32, 0x6d, 0x21, 0xd2, 0x78, 0xc4, 0x6a, 0xd6, 0x8c, 0x03, 0xa1, 0xc1, 0x58,
	0x59, 0xfe, 0x43, 0x6b, 0x58, 0xe9, 0x17, 0x02, 0x8d, 0xad, 0x61, 0xbc, 0xdf, 0xb1, 0x82, 0x78,
	0x33, 0x83, 0x7b, 0x93, 0x7e, 0xd0, 0x5e, 0x4f, 0x24, 0xad, 0x02, 0x18, 0x68, 0xe7, 0x05, 0x1b,
	0xd6, 0x84, 0x3e, 0x23, 0xe8, 0xe5, 0x42, 0x95, 0x01, 0xbd, 0x24, 0x7e, 0xaf, 0x97, 0xe1, 0x4d,
	0xab, 0x88, 0xff, 0x6b, 0x4b, 0x5f, 0x12, 0x27, 0x39, 0x78, 0x52, 0xf7, 0xba, 0xc7, 0xac, 0xed,
	0xde, 0x3d, 0xbc, 0x72, 0x15, 0x04, 0x1f, 0x5e, 0x19, 0xd5, 0x3e, 0xbc, 0x32, 0x82, 0x6e, 0x03,
	0xc4, 0xaa, 0x6d, 0x7b, 0x21, 0x86, 0x35, 0x95, 0xf7, 0xa8, 0x7b, 0x34, 0x03, 0xb8, 0x13, 0x97,
	0xe3, 0x1e, 0xde, 0x14, 0xf2, 0xb0, 0x10, 0xb9, 0xac, 0x8c, 0xd5, 0x83, 0x67, 0xb0, 0x81, 0xd3,
	0x5e, 0x67, 0xe8, 0xe4, 0x16, 0x4e, 0xf2, 0xcd, 0x0b, 0x32, 0x29, 0x03, 0xfa, 0x60, 0xac, 0x0e,
	0x5d, 0x08, 0x6f, 0xfa, 0x08, 0x4a, 0x73, 0x65, 0x7a, 0x4a, 0x0f, 0x4b, 0xf9, 0x77, 0x08, 0x68,
	0x3b, 0xf9, 0x7d, 0xb4, 0x89, 0xe8, 0xb4, 0x43, 0x53, 0x7c, 0xe5, 0x0b, 0xc6, 0x23, 0x82, 0x8b,
	0x3c, 0x43, 0x38, 0x25, 0xaf, 0x14, 0x92, 0xed, 0x4f, 0xe1, 0xbf, 0xc1, 0x94, 0xa5, 0x08, 0x9e,
	0xb2, 0x2a, 0x9d, 0x7f, 0xfa, 0xf5, 0xe7, 0x9b, 0xf8, 0x34, 0x99, 0xd2, 0x84, 0x63, 0x91, 0xc7,
	0xc8, 0x47, 0xad, 0xe7, 0x02, 0x26, 0x6f, 0x51, 0x67, 0x7f, 0x93, 0x42, 0x40, 0x76, 0xdf, 0x05,
	0xa7, 0x14, 0x23, 0x7a, 0x03, 0x4f, 0x41, 0xf0, 0x2c, 0x90, 0xb9, 0x01, 0x3c, 0xed, 0xdb, 0x5f,
	0x3b, 0xb2, 0x6a, 0xc7, 0xe4, 0x35, 0xc2, 0x18, 0x32, 0xac, 0xda, 0x76, 0x20, 0x99, 0xef, 0xda,
	0x0b, 0x24, 0xf3, 0xdf, 0x60, 0x74, 0x51, 0x90, 0x5d, 0x27, 0xd3, 0x21, 0x64, 0xe4, 0x13, 0x40,
	0xc1, 0x32, 0xd4, 0xc2, 0x05, 0xf0, 0x2c, 0x7b, 0xe5, 0x46, 0xf4, 0x00, 0x40, 0x5b, 0x11, 0x68,
	0x05, 0x92, 0x0b, 0x42, 0x93, 0xdf, 0x8e, 0xb4, 0x23, 0x71, 0x4c, 0x8f, 0xc9, 0x07, 0x84, 0xff,
	0xec, 0xa6, 0xe2, 0xea, 0x69, 0xe1, 0x7a, 0x44, 0x07, 0xed, 0x7b, 0xc1, 0xd0, 0x9c, 0x00, 0x9d,
	0x23, 0x34, 0x1c, 0x94, 0xcf, 0x36, 0x25, 0xf7, 0x1a, 0xc9, 0x07, 0x2b, 0xe2, 0xd9, 0xca, 0x4a,
	0x21, 0x9a, 0x33, 0x10, 0x15, 0x05, 0xd1, 0x22, 0x99, 0x1f, 0x40, 0x24, 0x77, 0x69, 0x47, 0xb5,
	0x97, 0x08, 0x8f, 0xc9, 0x0c, 0x5c, 0xb1, 0x7c, 0xb0, 0x00, 0xd1, 0xb9, 0x7c, 0x8b, 0x3f, 0xf4,
	0x5c, 0xc2, 0x8e, 0x7f, 0x81, 0x70, 0x92, 0xaf, 0x21, 0xb2, 0x14, 0xd2, 0x75, 0x77, 0x79, 0x2a,
	0xb9, 0x28, 0xae, 0x80, 0x91, 0x17, 0x18, 0xf3, 0x64, 0x76, 0x10, 0x06, 0x63, 0xf5, 0x8e, 0x38,
	0xcf, 0x11, 0x1e, 0xe5, 0xd1, 0x5c, 0x9a, 0xa5, 0x90, 0x6e, 0x23, 0xf2, 0x5c, 0xd8, 0xcb, 0x74,
	0x56, 0xf0, 0x4c, 0x91, 0x6b, 0x01, 0x3c, 0xa5, 0xd2, 0xc9, 0x59, 0x06, 0x9d, 0x9e, 0x65, 0xd0,
	0x8f, 0xb3, 0x0c, 0x7a, 0x75, 0x9e, 0x89, 0x9d, 0x9e, 0x67, 0x62, 0xdf, 0xce, 0x33, 0xb1, 0x87,
	0x59, 0xd3, 0x72, 0x9f, 0xec, 0x55, 0xd4, 0x2a, 0x6b, 0xf8, 0x13, 0x1c, 0xc8, 0x14, 0xee, 0x61,
	0xcb, 0x70, 0x2a, 0x29, 0xf1, 0x0b, 0xe1, 0xe6, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf6, 0xe5,
	0x4e, 0x74, 0x0f, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a VoteLog by id.
	VoteLog(ctx context.Context, in *QueryGetVoteLogRequest, opts ...grpc.CallOption) (*QueryGetVoteLogResponse, error)
	// Queries a list of VoteLog items.
	VoteLogAll(ctx context.Context, in *QueryAllVoteLogRequest, opts ...grpc.CallOption) (*QueryAllVoteLogResponse, error)
	// Queries a VoteCasted by index.
	VoteCasted(ctx context.Context, in *QueryGetVoteCastedRequest, opts ...grpc.CallOption) (*QueryGetVoteCastedResponse, error)
	// Queries a list of VoteCasted items.
	VoteCastedAll(ctx context.Context, in *QueryAllVoteCastedRequest, opts ...grpc.CallOption) (*QueryAllVoteCastedResponse, error)
	// Queries a Ballot by index.
	Ballot(ctx context.Context, in *QueryGetBallotRequest, opts ...grpc.CallOption) (*QueryGetBallotResponse, error)
	// Queries a list of Ballot items.
	BallotAll(ctx context.Context, in *QueryAllBallotRequest, opts ...grpc.CallOption) (*QueryAllBallotResponse, error)
	// Queries a Book by index.
	Book(ctx context.Context, in *QueryGetBookRequest, opts ...grpc.CallOption) (*QueryGetBookResponse, error)
	// Queries a list of Book items.
	BookAll(ctx context.Context, in *QueryAllBookRequest, opts ...grpc.CallOption) (*QueryAllBookResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/mandelabs.mande.vote.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VoteLog(ctx context.Context, in *QueryGetVoteLogRequest, opts ...grpc.CallOption) (*QueryGetVoteLogResponse, error) {
	out := new(QueryGetVoteLogResponse)
	err := c.cc.Invoke(ctx, "/mandelabs.mande.vote.Query/VoteLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VoteLogAll(ctx context.Context, in *QueryAllVoteLogRequest, opts ...grpc.CallOption) (*QueryAllVoteLogResponse, error) {
	out := new(QueryAllVoteLogResponse)
	err := c.cc.Invoke(ctx, "/mandelabs.mande.vote.Query/VoteLogAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VoteCasted(ctx context.Context, in *QueryGetVoteCastedRequest, opts ...grpc.CallOption) (*QueryGetVoteCastedResponse, error) {
	out := new(QueryGetVoteCastedResponse)
	err := c.cc.Invoke(ctx, "/mandelabs.mande.vote.Query/VoteCasted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VoteCastedAll(ctx context.Context, in *QueryAllVoteCastedRequest, opts ...grpc.CallOption) (*QueryAllVoteCastedResponse, error) {
	out := new(QueryAllVoteCastedResponse)
	err := c.cc.Invoke(ctx, "/mandelabs.mande.vote.Query/VoteCastedAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Ballot(ctx context.Context, in *QueryGetBallotRequest, opts ...grpc.CallOption) (*QueryGetBallotResponse, error) {
	out := new(QueryGetBallotResponse)
	err := c.cc.Invoke(ctx, "/mandelabs.mande.vote.Query/Ballot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BallotAll(ctx context.Context, in *QueryAllBallotRequest, opts ...grpc.CallOption) (*QueryAllBallotResponse, error) {
	out := new(QueryAllBallotResponse)
	err := c.cc.Invoke(ctx, "/mandelabs.mande.vote.Query/BallotAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Book(ctx context.Context, in *QueryGetBookRequest, opts ...grpc.CallOption) (*QueryGetBookResponse, error) {
	out := new(QueryGetBookResponse)
	err := c.cc.Invoke(ctx, "/mandelabs.mande.vote.Query/Book", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BookAll(ctx context.Context, in *QueryAllBookRequest, opts ...grpc.CallOption) (*QueryAllBookResponse, error) {
	out := new(QueryAllBookResponse)
	err := c.cc.Invoke(ctx, "/mandelabs.mande.vote.Query/BookAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a VoteLog by id.
	VoteLog(context.Context, *QueryGetVoteLogRequest) (*QueryGetVoteLogResponse, error)
	// Queries a list of VoteLog items.
	VoteLogAll(context.Context, *QueryAllVoteLogRequest) (*QueryAllVoteLogResponse, error)
	// Queries a VoteCasted by index.
	VoteCasted(context.Context, *QueryGetVoteCastedRequest) (*QueryGetVoteCastedResponse, error)
	// Queries a list of VoteCasted items.
	VoteCastedAll(context.Context, *QueryAllVoteCastedRequest) (*QueryAllVoteCastedResponse, error)
	// Queries a Ballot by index.
	Ballot(context.Context, *QueryGetBallotRequest) (*QueryGetBallotResponse, error)
	// Queries a list of Ballot items.
	BallotAll(context.Context, *QueryAllBallotRequest) (*QueryAllBallotResponse, error)
	// Queries a Book by index.
	Book(context.Context, *QueryGetBookRequest) (*QueryGetBookResponse, error)
	// Queries a list of Book items.
	BookAll(context.Context, *QueryAllBookRequest) (*QueryAllBookResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) VoteLog(ctx context.Context, req *QueryGetVoteLogRequest) (*QueryGetVoteLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteLog not implemented")
}
func (*UnimplementedQueryServer) VoteLogAll(ctx context.Context, req *QueryAllVoteLogRequest) (*QueryAllVoteLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteLogAll not implemented")
}
func (*UnimplementedQueryServer) VoteCasted(ctx context.Context, req *QueryGetVoteCastedRequest) (*QueryGetVoteCastedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteCasted not implemented")
}
func (*UnimplementedQueryServer) VoteCastedAll(ctx context.Context, req *QueryAllVoteCastedRequest) (*QueryAllVoteCastedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteCastedAll not implemented")
}
func (*UnimplementedQueryServer) Ballot(ctx context.Context, req *QueryGetBallotRequest) (*QueryGetBallotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ballot not implemented")
}
func (*UnimplementedQueryServer) BallotAll(ctx context.Context, req *QueryAllBallotRequest) (*QueryAllBallotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BallotAll not implemented")
}
func (*UnimplementedQueryServer) Book(ctx context.Context, req *QueryGetBookRequest) (*QueryGetBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Book not implemented")
}
func (*UnimplementedQueryServer) BookAll(ctx context.Context, req *QueryAllBookRequest) (*QueryAllBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mandelabs.mande.vote.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VoteLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVoteLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VoteLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mandelabs.mande.vote.Query/VoteLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VoteLog(ctx, req.(*QueryGetVoteLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VoteLogAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVoteLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VoteLogAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mandelabs.mande.vote.Query/VoteLogAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VoteLogAll(ctx, req.(*QueryAllVoteLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VoteCasted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVoteCastedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VoteCasted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mandelabs.mande.vote.Query/VoteCasted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VoteCasted(ctx, req.(*QueryGetVoteCastedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VoteCastedAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVoteCastedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VoteCastedAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mandelabs.mande.vote.Query/VoteCastedAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VoteCastedAll(ctx, req.(*QueryAllVoteCastedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Ballot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBallotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Ballot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mandelabs.mande.vote.Query/Ballot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Ballot(ctx, req.(*QueryGetBallotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BallotAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBallotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BallotAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mandelabs.mande.vote.Query/BallotAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BallotAll(ctx, req.(*QueryAllBallotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Book_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Book(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mandelabs.mande.vote.Query/Book",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Book(ctx, req.(*QueryGetBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BookAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BookAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mandelabs.mande.vote.Query/BookAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BookAll(ctx, req.(*QueryAllBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mandelabs.mande.vote.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "VoteLog",
			Handler:    _Query_VoteLog_Handler,
		},
		{
			MethodName: "VoteLogAll",
			Handler:    _Query_VoteLogAll_Handler,
		},
		{
			MethodName: "VoteCasted",
			Handler:    _Query_VoteCasted_Handler,
		},
		{
			MethodName: "VoteCastedAll",
			Handler:    _Query_VoteCastedAll_Handler,
		},
		{
			MethodName: "Ballot",
			Handler:    _Query_Ballot_Handler,
		},
		{
			MethodName: "BallotAll",
			Handler:    _Query_BallotAll_Handler,
		},
		{
			MethodName: "Book",
			Handler:    _Query_Book_Handler,
		},
		{
			MethodName: "BookAll",
			Handler:    _Query_BookAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vote/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetVoteLogRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVoteLogRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVoteLogRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVoteLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVoteLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVoteLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.VoteLog.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllVoteLogRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVoteLogRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVoteLogRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVoteLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVoteLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVoteLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.VoteLog) > 0 {
		for iNdEx := len(m.VoteLog) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VoteLog[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVoteCastedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVoteCastedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVoteCastedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVoteCastedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVoteCastedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVoteCastedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.VoteCasted.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllVoteCastedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVoteCastedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVoteCastedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVoteCastedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVoteCastedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVoteCastedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.VoteCasted) > 0 {
		for iNdEx := len(m.VoteCasted) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VoteCasted[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBallotRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBallotRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBallotRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBallotResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBallotResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBallotResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Ballot.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllBallotRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBallotRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBallotRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBallotResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBallotResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBallotResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ballot) > 0 {
		for iNdEx := len(m.Ballot) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ballot[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBookRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBookRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBookRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBookResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBookResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBookResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Book.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllBookRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBookRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBookRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBookResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBookResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBookResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Book) > 0 {
		for iNdEx := len(m.Book) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Book[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetVoteLogRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetVoteLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.VoteLog.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllVoteLogRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVoteLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VoteLog) > 0 {
		for _, e := range m.VoteLog {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVoteCastedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVoteCastedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.VoteCasted.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllVoteCastedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVoteCastedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VoteCasted) > 0 {
		for _, e := range m.VoteCasted {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBallotRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBallotResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Ballot.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllBallotRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBallotResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ballot) > 0 {
		for _, e := range m.Ballot {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBookRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBookResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Book.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllBookRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBookResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Book) > 0 {
		for _, e := range m.Book {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVoteLogRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVoteLogRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVoteLogRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVoteLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVoteLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVoteLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VoteLog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVoteLogRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVoteLogRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVoteLogRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVoteLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVoteLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVoteLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteLog = append(m.VoteLog, VoteLog{})
			if err := m.VoteLog[len(m.VoteLog)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVoteCastedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVoteCastedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVoteCastedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVoteCastedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVoteCastedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVoteCastedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteCasted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VoteCasted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVoteCastedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVoteCastedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVoteCastedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVoteCastedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVoteCastedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVoteCastedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteCasted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteCasted = append(m.VoteCasted, VoteCasted{})
			if err := m.VoteCasted[len(m.VoteCasted)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBallotRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBallotRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBallotRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBallotResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBallotResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBallotResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ballot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ballot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBallotRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBallotRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBallotRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBallotResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBallotResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBallotResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ballot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ballot = append(m.Ballot, Ballot{})
			if err := m.Ballot[len(m.Ballot)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBookRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBookRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBookRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Book", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Book.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBookRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBookRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBookRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Book", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Book = append(m.Book, Book{})
			if err := m.Book[len(m.Book)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
